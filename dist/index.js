var C=Object.create;var j=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,J=Object.prototype.hasOwnProperty;var K=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var M=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of v(t))!J.call(e,s)&&s!==n&&j(e,s,{get:()=>t[s],enumerable:!(r=_(t,s))||r.enumerable});return e};var N=(e,t,n)=>(n=e!=null?C(B(e)):{},M(t||!e||!e.__esModule?j(n,"default",{value:e,enumerable:!0}):n,e));var S=K((Z,O)=>{O.exports=h;h.flatten=h;h.unflatten=P;function x(e){return e&&e.constructor&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}function $(e){return e}function h(e,t){t=t||{};let n=t.delimiter||".",r=t.maxDepth,s=t.transformKey||$,i={};function l(c,d,f){f=f||1,Object.keys(c).forEach(function(o){let a=c[o],u=t.safe&&Array.isArray(a),g=Object.prototype.toString.call(a),p=x(a),m=g==="[object Object]"||g==="[object Array]",y=d?d+n+s(o):s(o);if(!u&&!p&&m&&Object.keys(a).length&&(!t.maxDepth||f<r))return l(a,y,f+1);i[y]=a})}return l(e),i}function P(e,t){t=t||{};let n=t.delimiter||".",r=t.overwrite||!1,s=t.transformKey||$,i={};if(x(e)||Object.prototype.toString.call(e)!=="[object Object]")return e;function c(o){let a=Number(o);return isNaN(a)||o.indexOf(".")!==-1||t.object?o:a}function d(o,a,u){return Object.keys(u).reduce(function(g,p){return g[o+n+p]=u[p],g},a)}function f(o){let a=Object.prototype.toString.call(o),u=a==="[object Array]",g=a==="[object Object]";if(o){if(u)return!o.length;if(g)return!Object.keys(o).length}else return!0}return e=Object.keys(e).reduce(function(o,a){let u=Object.prototype.toString.call(e[a]);return!(u==="[object Object]"||u==="[object Array]")||f(e[a])?(o[a]=e[a],o):d(a,o,h(e[a],t))},{}),Object.keys(e).forEach(function(o){let a=o.split(n).map(s),u=c(a.shift()),g=c(a[0]),p=i;for(;g!==void 0;){if(u==="__proto__")return;let m=Object.prototype.toString.call(p[u]),y=m==="[object Object]"||m==="[object Array]";if(!r&&!y&&typeof p[u]<"u")return;(r&&!y||!r&&p[u]==null)&&(p[u]=typeof g=="number"&&!t.object?[]:{}),p=p[u],a.length>0&&(u=c(a.shift()),g=c(a[0]))}p[u]=P(e[o],t)}),i}});function b(e){return t=>n=>e({settings:t,env:n})}var w=N(S(),1);var I=L;function L(e,t,n){var r,s;if(Array.isArray(t)&&(r=t.slice(0)),typeof t=="string"&&(r=t.split(".")),typeof t=="symbol"&&(r=[t]),!Array.isArray(r))throw new Error("props arg must be an array, a string or a symbol");if(s=r.pop(),!s)return!1;E(s);for(var i;i=r.shift();)if(E(i),typeof e[i]>"u"&&(e[i]={}),e=e[i],!e||typeof e!="object")return!1;return e[s]=n,!0}function E(e){if(e=="__proto__"||e=="constructor"||e=="prototype")throw new Error("setting of prototype values not supported")}function R(e){if(e.pathPattern===void 0)throw new Error("The pathPattern setting must be defined and include the {language} placeholder. An example would be './resources/{language}.json'.");if(e.pathPattern.includes("{language}")===!1)throw new Error("The pathPattern setting must be defined and include the {language} placeholder. An example would be './resources/{language}.json'.");if(e.pathPattern.endsWith(".json")===!1)throw new Error("The pathPattern setting must end with '.json'. An example would be './resources/{language}.json'.")}var F=b(({settings:e,env:t})=>({id:"samuelstroschein.inlangPluginJson",async config(){return R(e),{languages:await W({$fs:t.$fs,settings:e}),readResources:async n=>k({...n,$fs:t.$fs,settings:e}),writeResources:async n=>z({...n,$fs:t.$fs,settings:e})}}}));async function W(e){let[t,n]=e.settings.pathPattern.split("{language}"),r=await e.$fs.readdir(t),s=[];for(let i of r)if(i.includes("."))i.endsWith(".json")&&s.push(i.replace(".json",""));else for(let l of await e.$fs.readdir(`${t}${i}`))l.endsWith(".json")&&!s.some(c=>c===i)&&s.push(i);return s}async function k(e){let t=[];for(let n of e.config.languages){let r=e.settings.pathPattern.replace("{language}",n);try{let s=JSON.parse(await e.$fs.readFile(r,{encoding:"utf-8"})),i=(0,w.default)(s);t.push(A(i,n,e.settings.variableReferencePattern))}catch{let s={},i=`${r.replace("/*.json","")}`,l=await e.$fs.readdir(i);for(let c of l){let d={};d[c.replace(".json","")]=JSON.parse(await e.$fs.readFile(`${i}/${c}`,{encoding:"utf-8"}));let f=(0,w.default)(d);s={...s,...f}}t.push(A(s,n,e.settings.variableReferencePattern))}}return t}async function z(e){let[,t]=e.settings.pathPattern.split("{language}"),n=t.startsWith("/");for(let r of e.resources){let s=e.settings.pathPattern.replace("{language}",r.languageTag.name);if(n){let i=structuredClone(r.body),l=[];i.map(c=>{let f=c.id.name.split(".").shift();f&&!l.some(o=>o===f)&&l.push(f)});for(let c of l){let d=i.filter(o=>o.id.name.startsWith(c)).map(o=>({...o,id:{...o.id,name:o.id.name.replace(`${c}.`,"")}})),f={type:r.type,languageTag:r.languageTag,body:d};await e.$fs.writeFile(s.replace("*",c),T(f,e.settings.variableReferencePattern))}}else await e.$fs.writeFile(s,T(r,e.settings.variableReferencePattern))}}function A(e,t,n){return{type:"Resource",languageTag:{type:"LanguageTag",name:t},body:Object.entries(e).map(([r,s])=>D(r,s,n))}}function D(e,t,n){let r=n&&(n[1]?new RegExp(`(\\${n[0]}[^\\${n[1]}]+\\${n[1]})`,"g"):new RegExp(`(${n}\\w+)`,"g")),s=[];if(r){let i=t.split(r);for(let l=0;l<i.length;l++)r.test(i[l])?s.push({type:"Placeholder",body:{type:"VariableReference",name:n[1]?i[l].slice(n[0].length,n[1].length*-1):i[l].slice(n[0].length)}}):i[l]!==""&&s.push({type:"Text",value:i[l]})}else s.push({type:"Text",value:t});return{type:"Message",id:{type:"Identifier",name:e},pattern:{type:"Pattern",elements:s}}}function T(e,t){let n={};return e.body.forEach(r=>{let[s,i]=V(r,t);I(n,s,i)}),JSON.stringify(n,null,2)}function V(e,t){let n=[];for(let s of e.pattern.elements)s.type==="Text"||!t?n.push(s.value):s.type==="Placeholder"&&(t[1]?n.push(`${t[0]}${s.body.name}${t[1]}`):n.push(`${t[0]}${s.body.name}`));let r=n.join("");return[e.id.name,r]}export{F as default};
/*! Bundled license information:

@inlang/core/dist/plugin/pluginBuildConfig.js:
  (*! DON'T TOP-LEVEL IMPORT ESBUILD PLUGINS. USE DYNAMIC IMPORTS. *)
  (*! See https://github.com/inlang/inlang/issues/486 *)
*/
